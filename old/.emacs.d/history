;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(shell-command-history xref--read-identifier-history magit-revision-history helm-file-name-history minibuffer-history empty-history extended-command-history read-number-history tmm--history yes-or-no-p-history buffer-name-history file-name-history read-expression-history))
(setq shell-command-history '("zsh"))
(setq magit-revision-history '("master"))
(setq helm-file-name-history '("page.rb" ".emacs" "page.rb" "Gemfile" ".emacs" "page.rb" ".emacs" "page.rb" ".emacs" "page.rb" ".emacs" "page.rb" ".emacs"))
(setq minibuffer-history '("diff-hl" "git-gutter" "move-text" "global" "keycast" "global" "expand-region" "global" "multiple-cursors" "multiple-cursors-20230113.835" "cl-libify-20181130.230" "cl-libify" "multiple-cursors" "all-the-icons" "doom-modeline" "/.emacs.d/.dap-breakpoints" "/.emacs.d/.cache/" "/.emacs.d/.lsp-session-v1" "spaceline" "vterm" "mode-icons" "powerline-evil" "powerline" "lsp-latex" "rust-analyzer (Already installed)" "json-ls" "eslint" "rust-analyzer" "yasnippet" "dap-mode" #("helm-z-20171204.325" 0 19 (prescient-ignore-case t prescient-regexps ("\\(?:h[̧̣̮̱̂̇̈̌]\\|[hĥȟʰḣḥḧḩḫẖₕℎⓗｈ𝐡𝒉𝒽𝓱𝔥𝕙𝖍𝗁𝗵𝘩𝙝𝚑]\\)\\(?:e[̀-̄̆-̧̨̣̭̰̉̌̏̑]\\|[eè-ëēĕėęěȅȇȩᵉḕḗḙḛḝẹẻẽếềểễệₑℯⅇⓔｅ𝐞𝑒𝒆𝓮𝔢𝕖𝖊𝖾𝗲𝘦𝙚𝚎]\\)\\(?:\\(?:l[̧̣̭̱́̌]\\|[lĺļľˡḷḹḻḽₗℓⅼⓛｌ𝐥𝑙𝒍𝓁𝓵𝔩𝕝𝖑𝗅𝗹𝘭𝙡𝚕]\\)\\(?:m[̣́̇]\\|[mᵐḿṁṃₘⅿⓜｍ𝐦𝑚𝒎𝓂𝓶𝔪𝕞𝖒𝗆𝗺𝘮𝙢𝚖]\\)\\|㏐\\)\\|helm\\|\\bh\\w*\\W*\\be\\w*\\W*\\bl\\w*\\W*\\bm\\w*"))) #("helm-z" 0 6 (prescient-ignore-case t prescient-regexps ("\\(?:h[̧̣̮̱̂̇̈̌]\\|[hĥȟʰḣḥḧḩḫẖₕℎⓗｈ𝐡𝒉𝒽𝓱𝔥𝕙𝖍𝗁𝗵𝘩𝙝𝚑]\\)\\(?:e[̀-̄̆-̧̨̣̭̰̉̌̏̑]\\|[eè-ëēĕėęěȅȇȩᵉḕḗḙḛḝẹẻẽếềểễệₑℯⅇⓔｅ𝐞𝑒𝒆𝓮𝔢𝕖𝖊𝖾𝗲𝘦𝙚𝚎]\\)\\(?:\\(?:l[̧̣̭̱́̌]\\|[lĺļľˡḷḹḻḽₗℓⅼⓛｌ𝐥𝑙𝒍𝓁𝓵𝔩𝕝𝖑𝗅𝗹𝘭𝙡𝚕]\\)\\(?:m[̣́̇]\\|[mᵐḿṁṃₘⅿⓜｍ𝐦𝑚𝒎𝓂𝓶𝔪𝕞𝖒𝗆𝗺𝘮𝙢𝚖]\\)\\|㏐\\)\\|helm\\|\\bh\\w*\\W*\\be\\w*\\W*\\bl\\w*\\W*\\bm\\w*"))) #("helm-lsp" 0 8 (prescient-ignore-case t prescient-regexps ("\\(?:h[̧̣̮̱̂̇̈̌]\\|[hĥȟʰḣḥḧḩḫẖₕℎⓗｈ𝐡𝒉𝒽𝓱𝔥𝕙𝖍𝗁𝗵𝘩𝙝𝚑]\\)\\(?:e[̀-̄̆-̧̨̣̭̰̉̌̏̑]\\|[eè-ëēĕėęěȅȇȩᵉḕḗḙḛḝẹẻẽếềểễệₑℯⅇⓔｅ𝐞𝑒𝒆𝓮𝔢𝕖𝖊𝖾𝗲𝘦𝙚𝚎]\\)\\(?:\\(?:l[̧̣̭̱́̌]\\|[lĺļľˡḷḹḻḽₗℓⅼⓛｌ𝐥𝑙𝒍𝓁𝓵𝔩𝕝𝖑𝗅𝗹𝘭𝙡𝚕]\\)\\(?:m[̣́̇]\\|[mᵐḿṁṃₘⅿⓜｍ𝐦𝑚𝒎𝓂𝓶𝔪𝕞𝖒𝗆𝗺𝘮𝙢𝚖]\\)\\|㏐\\)[﹣－-]\\(?:l[̧̣̭̱́̌]\\|[lĺļľˡḷḹḻḽₗℓⅼⓛｌ𝐥𝑙𝒍𝓁𝓵𝔩𝕝𝖑𝗅𝗹𝘭𝙡𝚕]\\)\\(?:s[̧̣̦́̂̇̌]\\|[sśŝşšſșˢṡṣṥṧṩẛₛⓢﬅｓ𝐬𝑠𝒔𝓈𝓼𝔰𝕤𝖘𝗌𝘀𝘴𝙨𝚜]\\)\\|helm-ls\\|\\bh\\w*\\W*\\be\\w*\\W*\\bl\\w*\\W*\\bm\\w*\\W*\\b-\\w*\\W*\\bl\\w*\\W*\\bs\\w*"))) #("lsp-treemacs" 0 12 (prescient-ignore-case t prescient-regexps ("\\(?:l[̧̣̭̱́̌]\\|[lĺļľˡḷḹḻḽₗℓⅼⓛｌ𝐥𝑙𝒍𝓁𝓵𝔩𝕝𝖑𝗅𝗹𝘭𝙡𝚕]\\)\\(?:s[̧̣̦́̂̇̌]\\|[sśŝşšſșˢṡṣṥṧṩẛₛⓢﬅｓ𝐬𝑠𝒔𝓈𝓼𝔰𝕤𝖘𝗌𝘀𝘴𝙨𝚜]\\)\\(?:p[́̇]\\|[pᵖṕṗₚⓟｐ𝐩𝑝𝒑𝓅𝓹𝔭𝕡𝖕𝗉𝗽𝘱𝙥𝚙]\\)[﹣－-]\\(?:t[̧̣̦̭̱̇̈̌]\\|[tţťțᵗṫṭṯṱẗₜⓣｔ𝐭𝑡𝒕𝓉𝓽𝔱𝕥𝖙𝗍𝘁𝘵𝙩𝚝]\\)\\|lsp-t\\|\\bl\\w*\\W*\\bs\\w*\\W*\\bp\\w*\\W*\\b-\\w*\\W*\\bt\\w*"))) #("company" 0 7 (prescient-ignore-case t prescient-regexps (#("\\(?:c[̧́̂̇̌]\\|[cçćĉċčᶜḉⅽⓒｃ𝐜𝑐𝒄𝒸𝓬𝔠𝕔𝖈𝖼𝗰𝘤𝙘𝚌]\\)\\(?:o[̀-̄̆-̨̛̣̉̋̌̏̑]\\|[oºò-öōŏőơǒǫǭȍȏȫȭȯȱᵒṍṏṑṓọỏốồổỗộớờởỡợₒℴⓞｏ𝐨𝑜𝒐𝓸𝔬𝕠𝖔𝗈𝗼𝘰𝙤𝚘]\\)\\(?:m[̣́̇]\\|[mᵐḿṁṃₘⅿⓜｍ𝐦𝑚𝒎𝓂𝓶𝔪𝕞𝖒𝗆𝗺𝘮𝙢𝚖]\\)\\(?:p[́̇]\\|[pᵖṕṗₚⓟｐ𝐩𝑝𝒑𝓅𝓹𝔭𝕡𝖕𝗉𝗽𝘱𝙥𝚙]\\)\\(?:a[̀-̄̆-̨̣̥̊̌̏̑]\\|[aªà-åāăąǎǟǡǻȁȃȧᵃḁạảấầẩẫậắằẳẵặₐⓐａ𝐚𝑎𝒂𝒶𝓪𝔞𝕒𝖆𝖺𝗮𝘢𝙖𝚊]\\)\\(?:n[̧̣̭̱̀́̃̇̌]\\|[nñńņňǹṅṇṉṋⁿₙⓝｎ𝐧𝑛𝒏𝓃𝓷𝔫𝕟𝖓𝗇𝗻𝘯𝙣𝚗]\\)\\(?:y[̀-̄̇-̣̊]\\|[yýÿŷȳʸẏẙỳỵỷỹⓨｙ𝐲𝑦𝒚𝓎𝔂𝔶𝕪𝖞𝗒𝘆𝘺𝙮𝚢]\\)\\|company\\|\\bc\\w*\\W*\\bo\\w*\\W*\\bm\\w*\\W*\\bp\\w*\\W*\\ba\\w*\\W*\\bn\\w*\\W*\\by\\w*" 360 367 (prescient-ignore-case t prescient-regexps ("\\(?:c[̧́̂̇̌]\\|[cçćĉċčᶜḉⅽⓒｃ𝐜𝑐𝒄𝒸𝓬𝔠𝕔𝖈𝖼𝗰𝘤𝙘𝚌]\\)\\|c\\|\\bc\\w*")))))) #("lsp-ui" 0 6 (prescient-ignore-case t prescient-regexps (#("\\(?:l[̧̣̭̱́̌]\\|[lĺļľˡḷḹḻḽₗℓⅼⓛｌ𝐥𝑙𝒍𝓁𝓵𝔩𝕝𝖑𝗅𝗹𝘭𝙡𝚕]\\)\\(?:s[̧̣̦́̂̇̌]\\|[sśŝşšſșˢṡṣṥṧṩẛₛⓢﬅｓ𝐬𝑠𝒔𝓈𝓼𝔰𝕤𝖘𝗌𝘀𝘴𝙨𝚜]\\)\\(?:p[́̇]\\|[pᵖṕṗₚⓟｐ𝐩𝑝𝒑𝓅𝓹𝔭𝕡𝖕𝗉𝗽𝘱𝙥𝚙]\\)[﹣－-]\\(?:u[̀-̄̆̈-̨̛̣̤̭̰̌̏̑]\\|[uù-üũūŭůűųưǔǖǘǚǜȕȗᵘᵤṳṵṷṹṻụủứừửữựⓤｕ𝐮𝑢𝒖𝓊𝓾𝔲𝕦𝖚𝗎𝘂𝘶𝙪𝚞]\\)\\(?:i[̀-̨̣̰̄̆̈̉̌̏̑]\\|[iì-ïĩīĭįǐȉȋᵢḭḯỉịⁱℹⅈⅰⓘｉ𝐢𝑖𝒊𝒾𝓲𝔦𝕚𝖎𝗂𝗶𝘪𝙞𝚒]\\)\\|lsp-ui\\|\\bl\\w*\\W*\\bs\\w*\\W*\\bp\\w*\\W*\\b-\\w*\\W*\\bu\\w*\\W*\\bi\\w*" 274 280 (prescient-ignore-case t prescient-regexps ("\\(?:l[̧̣̭̱́̌]\\|[lĺļľˡḷḹḻḽₗℓⅼⓛｌ𝐥𝑙𝒍𝓁𝓵𝔩𝕝𝖑𝗅𝗹𝘭𝙡𝚕]\\)\\(?:s[̧̣̦́̂̇̌]\\|[sśŝşšſșˢṡṣṥṧṩẛₛⓢﬅｓ𝐬𝑠𝒔𝓈𝓼𝔰𝕤𝖘𝗌𝘀𝘴𝙨𝚜]\\)\\(?:p[́̇]\\|[pᵖṕṗₚⓟｐ𝐩𝑝𝒑𝓅𝓹𝔭𝕡𝖕𝗉𝗽𝘱𝙥𝚙]\\)[﹣－-]\\|lsp-\\|\\bl\\w*\\W*\\bs\\w*\\W*\\bp\\w*\\W*\\b-\\w*")))))) #("lsp-mode" 0 8 (prescient-ignore-case t prescient-regexps ("\\(?:l[̧̣̭̱́̌]\\|[lĺļľˡḷḹḻḽₗℓⅼⓛｌ𝐥𝑙𝒍𝓁𝓵𝔩𝕝𝖑𝗅𝗹𝘭𝙡𝚕]\\)\\(?:s[̧̣̦́̂̇̌]\\|[sśŝşšſșˢṡṣṥṧṩẛₛⓢﬅｓ𝐬𝑠𝒔𝓈𝓼𝔰𝕤𝖘𝗌𝘀𝘴𝙨𝚜]\\)\\(?:p[́̇]\\|[pᵖṕṗₚⓟｐ𝐩𝑝𝒑𝓅𝓹𝔭𝕡𝖕𝗉𝗽𝘱𝙥𝚙]\\)[﹣－-]\\(?:m[̣́̇]\\|[mᵐḿṁṃₘⅿⓜｍ𝐦𝑚𝒎𝓂𝓶𝔪𝕞𝖒𝗆𝗺𝘮𝙢𝚖]\\)\\|lsp-m\\|\\bl\\w*\\W*\\bs\\w*\\W*\\bp\\w*\\W*\\b-\\w*\\W*\\bm\\w*"))) #("helm-core-20230227.649" 0 22 (prescient-regexps nil prescient-ignore-case t)) #("helm-20230224.658" 0 17 (prescient-regexps nil prescient-ignore-case t)) #("prescient-20221216.112" 0 22 (prescient-regexps nil prescient-ignore-case t)) #("selectrum-prescient" 0 3 (face (completions-common-part)) 3 4 (face (completions-first-difference))) #("prescient" 0 4 (face (completions-common-part)) 4 5 (face (completions-first-difference))) "selec" "*helm-mode-kill-buffer*" "*scratch*" "*helm-mode-kill-buffer*" "*helm-mode-list-directory*" "*Directory*" "*Messages*" "*scratch*" "/Users/gd/workspace/rails/gregdonald/spec/f" "*helm-mode-kill-buffer*" "*helm-mode-switch-to-buffer*" "*Messages*" "*scratch*" "page.rb" "*helm-mode-list-directory*" "*scratch*" "*helm locate*" "*scratch*" "*Directory*" "/Users/gd/workspace/rails/gregdonald/app/models/" "*helm-mode-kill-buffer*" "*Messages*" "*helm-mode-kill-buffer*" "*scratch*" "*helm-mode-kill-buffer*" "*Messages*" "*scratch*" "*helm-mode-kill-buffer*" "*scratch*" "*helm-mode-kill-buffer*" "*scratch*" "*helm-mode-kill-buffer*" "*Completions*" "*helm buffers*" "*rspec-compilation*" "*Messages*" "Gemfile" "page.rb" "page_spec.rb" "helm" "magit"))
(setq extended-command-history '("term" "package-install" "magit-diff" "term" "vterm" "package-install" "term" "customize-themes" "package-install" "package-refresh-contents" "package-install" "eval-region" "package-delete" "keycast-mode" "package-install" "save-place-mode" "eval-region" "package-install" "eval-region" "package-install" "ielm" "package-delete" "replace-string" "package-delete" "package-install" "package-refresh-contents" "package-install" "doom-modeline-mode" "all-the-icons-install-fonts" "package-install" "vterm" "magit" "company-complete" "package-install" "vterm" "package-install" "company-complete" "lsp-doctor" "lsp-install-server" "customize-group" "package-install" "package-delete" "package-install" "package-refresh-contents" #("package-install" 0 15 (prescient-ignore-case t prescient-regexps nil)) #("package-delete" 0 14 (prescient-ignore-case t prescient-regexps ("\\(?:p[́̇]\\|[pᵖṕṗₚⓟｐ𝐩𝑝𝒑𝓅𝓹𝔭𝕡𝖕𝗉𝗽𝘱𝙥𝚙]\\)\\(?:a[̀-̄̆-̨̣̥̊̌̏̑]\\|[aªà-åāăąǎǟǡǻȁȃȧᵃḁạảấầẩẫậắằẳẵặₐⓐａ𝐚𝑎𝒂𝒶𝓪𝔞𝕒𝖆𝖺𝗮𝘢𝙖𝚊]\\)\\|pa\\|\\bp\\w*\\W*\\ba\\w*"))) #("package-install" 0 15 (prescient-ignore-case t prescient-regexps nil)) #("package-refresh-contents" 0 24 (prescient-ignore-case t prescient-regexps (#("\\(?:p[́̇]\\|[pᵖṕṗₚⓟｐ𝐩𝑝𝒑𝓅𝓹𝔭𝕡𝖕𝗉𝗽𝘱𝙥𝚙]\\)\\(?:a[̀-̄̆-̨̣̥̊̌̏̑]\\|[aªà-åāăąǎǟǡǻȁȃȧᵃḁạảấầẩẫậắằẳẵặₐⓐａ𝐚𝑎𝒂𝒶𝓪𝔞𝕒𝖆𝖺𝗮𝘢𝙖𝚊]\\)\\(?:c[̧́̂̇̌]\\|[cçćĉċčᶜḉⅽⓒｃ𝐜𝑐𝒄𝒸𝓬𝔠𝕔𝖈𝖼𝗰𝘤𝙘𝚌]\\)\\(?:k[̧̣̱́̌]\\|[kķǩᵏḱḳḵₖⓚｋ𝐤𝑘𝒌𝓀𝓴𝔨𝕜𝖐𝗄𝗸𝘬𝙠𝚔]\\)\\(?:a[̀-̄̆-̨̣̥̊̌̏̑]\\|[aªà-åāăąǎǟǡǻȁȃȧᵃḁạảấầẩẫậắằẳẵặₐⓐａ𝐚𝑎𝒂𝒶𝓪𝔞𝕒𝖆𝖺𝗮𝘢𝙖𝚊]\\)\\(?:g[̧́̂̄̆̇̌]\\|[gĝğġģǧǵᵍḡℊⓖｇ𝐠𝑔𝒈𝓰𝔤𝕘𝖌𝗀𝗴𝘨𝙜𝚐]\\)\\(?:e[̀-̄̆-̧̨̣̭̰̉̌̏̑]\\|[eè-ëēĕėęěȅȇȩᵉḕḗḙḛḝẹẻẽếềểễệₑℯⅇⓔｅ𝐞𝑒𝒆𝓮𝔢𝕖𝖊𝖾𝗲𝘦𝙚𝚎]\\)[﹣－-]\\(?:r[̧̣̱́̇̌̏̑]\\|[rŕŗřȑȓʳᵣṙṛṝṟⓡｒ𝐫𝑟𝒓𝓇𝓻𝔯𝕣𝖗𝗋𝗿𝘳𝙧𝚛]\\)\\(?:e[̀-̄̆-̧̨̣̭̰̉̌̏̑]\\|[eè-ëēĕėęěȅȇȩᵉḕḗḙḛḝẹẻẽếềểễệₑℯⅇⓔｅ𝐞𝑒𝒆𝓮𝔢𝕖𝖊𝖾𝗲𝘦𝙚𝚎]\\)\\|package-re\\|\\bp\\w*\\W*\\ba\\w*\\W*\\bc\\w*\\W*\\bk\\w*\\W*\\ba\\w*\\W*\\bg\\w*\\W*\\be\\w*\\W*\\b-\\w*\\W*\\br\\w*\\W*\\be\\w*" 497 507 (prescient-ignore-case t prescient-regexps ("\\(?:p[́̇]\\|[pᵖṕṗₚⓟｐ𝐩𝑝𝒑𝓅𝓹𝔭𝕡𝖕𝗉𝗽𝘱𝙥𝚙]\\)\\(?:a[̀-̄̆-̨̣̥̊̌̏̑]\\|[aªà-åāăąǎǟǡǻȁȃȧᵃḁạảấầẩẫậắằẳẵặₐⓐａ𝐚𝑎𝒂𝒶𝓪𝔞𝕒𝖆𝖺𝗮𝘢𝙖𝚊]\\)\\(?:c[̧́̂̇̌]\\|[cçćĉċčᶜḉⅽⓒｃ𝐜𝑐𝒄𝒸𝓬𝔠𝕔𝖈𝖼𝗰𝘤𝙘𝚌]\\)\\(?:k[̧̣̱́̌]\\|[kķǩᵏḱḳḵₖⓚｋ𝐤𝑘𝒌𝓀𝓴𝔨𝕜𝖐𝗄𝗸𝘬𝙠𝚔]\\)\\|pack\\|\\bp\\w*\\W*\\ba\\w*\\W*\\bc\\w*\\W*\\bk\\w*")))))) #("package-install" 0 15 (prescient-ignore-case t prescient-regexps ("\\(?:p[́̇]\\|[pᵖṕṗₚⓟｐ𝐩𝑝𝒑𝓅𝓹𝔭𝕡𝖕𝗉𝗽𝘱𝙥𝚙]\\)\\(?:a[̀-̄̆-̨̣̥̊̌̏̑]\\|[aªà-åāăąǎǟǡǻȁȃȧᵃḁạảấầẩẫậắằẳẵặₐⓐａ𝐚𝑎𝒂𝒶𝓪𝔞𝕒𝖆𝖺𝗮𝘢𝙖𝚊]\\)\\(?:c[̧́̂̇̌]\\|[cçćĉċčᶜḉⅽⓒｃ𝐜𝑐𝒄𝒸𝓬𝔠𝕔𝖈𝖼𝗰𝘤𝙘𝚌]\\)\\(?:k[̧̣̱́̌]\\|[kķǩᵏḱḳḵₖⓚｋ𝐤𝑘𝒌𝓀𝓴𝔨𝕜𝖐𝗄𝗸𝘬𝙠𝚔]\\)\\|pack\\|\\bp\\w*\\W*\\ba\\w*\\W*\\bc\\w*\\W*\\bk\\w*"))) #("package-delete" 0 14 (prescient-regexps ("\\(?:p[́̇]\\|[pᵖṕṗₚⓟｐ𝐩𝑝𝒑𝓅𝓹𝔭𝕡𝖕𝗉𝗽𝘱𝙥𝚙]\\)\\(?:a[̀-̄̆-̨̣̥̊̌̏̑]\\|[aªà-åāăąǎǟǡǻȁȃȧᵃḁạảấầẩẫậắằẳẵặₐⓐａ𝐚𝑎𝒂𝒶𝓪𝔞𝕒𝖆𝖺𝗮𝘢𝙖𝚊]\\)\\(?:c[̧́̂̇̌]\\|[cçćĉċčᶜḉⅽⓒｃ𝐜𝑐𝒄𝒸𝓬𝔠𝕔𝖈𝖼𝗰𝘤𝙘𝚌]\\)\\(?:k[̧̣̱́̌]\\|[kķǩᵏḱḳḵₖⓚｋ𝐤𝑘𝒌𝓀𝓴𝔨𝕜𝖐𝗄𝗸𝘬𝙠𝚔]\\)\\(?:a[̀-̄̆-̨̣̥̊̌̏̑]\\|[aªà-åāăąǎǟǡǻȁȃȧᵃḁạảấầẩẫậắằẳẵặₐⓐａ𝐚𝑎𝒂𝒶𝓪𝔞𝕒𝖆𝖺𝗮𝘢𝙖𝚊]\\)\\(?:g[̧́̂̄̆̇̌]\\|[gĝğġģǧǵᵍḡℊⓖｇ𝐠𝑔𝒈𝓰𝔤𝕘𝖌𝗀𝗴𝘨𝙜𝚐]\\)\\(?:e[̀-̄̆-̧̨̣̭̰̉̌̏̑]\\|[eè-ëēĕėęěȅȇȩᵉḕḗḙḛḝẹẻẽếềểễệₑℯⅇⓔｅ𝐞𝑒𝒆𝓮𝔢𝕖𝖊𝖾𝗲𝘦𝙚𝚎]\\)[﹣－-]\\(?:d[̧̣̭̱̇̌]\\|[dďᵈḋḍḏḑḓⅆⅾⓓｄ𝐝𝑑𝒅𝒹𝓭𝔡𝕕𝖉𝖽𝗱𝘥𝙙𝚍]\\)\\|package-d\\|\\bp\\w*\\W*\\ba\\w*\\W*\\bc\\w*\\W*\\bk\\w*\\W*\\ba\\w*\\W*\\bg\\w*\\W*\\be\\w*\\W*\\b-\\w*\\W*\\bd\\w*") prescient-ignore-case t)) "package-install" "helm-locate" "helm-mode" "helm-buffers-list" "package-install" "magit-version" "package-install" "list-packages" "package-refresh-contents"))
(setq tmm--history '("s==>     Stash...                z" "4==>Bury buffer" "3==>Refresh buffer               g" "2==>Change buffer arguments" "A==>Show another buffer          J" "M==>Show manual" "S==>Show command dispatcher...   ?" "a==>Advanced" "I==>     Init...                 I" "i==>     Ignore...               i" "1==>     Clone...                C" "P==>     Push...                 P" "p==>     Pull...                 F" "f==>     Fetch...                f" "0==>     Rebase...               r" "m==>     Merge...                m" "R==>     Remote...               M" "B==>     Branch...               b" "t==>     Tag...                  t" "s==>     Stash...                z" "C==>     Commit...               c" "r==>     References...           y" "l==>     Log...                  l" "e==>     Ediff...                E" "d==>     Diff...                 d" "c==>     Cherries...             Y" "b==>     Bisect...               B"))
(setq yes-or-no-p-history '("yes" "no" "yes"))
(setq buffer-name-history '("*Customize Group: Emacs*" "*Custom Themes*" "*scratch*" "*Messages*" "*scratch*" "*Customize Group: Emacs*" "*Customize Group: Faces*" "*Customize Group: Font Lock*" "*scratch*" "*Messages*" "*scratch*" "*terminal*" "*Customize Group: Emacs*" "*Customize Group: Custom Faces*" "*Customize Group: Faces*" "*info*" "*Customize Group: Basic Faces*" "faces.el.gz" "*info*" "faces.el.gz" "magit-diff: emacs-config" "*vterm*" "*terminal*" "blackjack_spec.rb" "*Help*" "blackjack.rb" "subr.el.gz" "*Backtrace*" "*ruby-ls*" "*lsp-log*" "*Messages*" "*scratch*" "blackjack.rb" "*scratch*" "magit-process: emacs-config" "*Warnings*" "*Completions*" "*Messages*" "*scratch*" "magit: emacs-config" "magit-revision: emacs-config" "magit-stashes: emacs-config" "magit-diff: emacs-config" "magit-stash: emacs-config" "magit-process: emacs-config" "archive-contents" ".gitignore" "*vterm*" "elpa" "*Messages*" "*ruby-ls*" "*lsp-log*" "*Messages*" "*scratch*" "blackjack_spec.rb" "blackjack.rb" "Gemfile" "spec_helper.rb" "*vterm*" "*ruby-ls*" "*lsp-log*" "*Messages*" "page.rb" "page_spec.rb" "*ruby-ls*" "*lsp-log*" "*scratch*" "page.rb" "page_spec.rb" "page_search_spec.rb" "*Messages*" #("*Compile-Log*" 0 13 (prescient-ignore-case t prescient-regexps nil)) #("*Messages*" 0 10 (prescient-ignore-case t prescient-regexps nil)) #("*scratch*" 0 9 (prescient-ignore-case t prescient-regexps nil)) #("page.rb" 0 7 (prescient-ignore-case t prescient-regexps nil)) #("page_spec.rb" 0 12 (prescient-ignore-case t prescient-regexps nil)) #("01-intro.tex" 0 12 (prescient-regexps nil prescient-ignore-case t)) #("01-intro.aux" 0 12 (prescient-regexps nil prescient-ignore-case t)) #("*Messages*" 0 1 (face (completions-first-difference))) #("*scratch*" 0 1 (face (completions-first-difference))) #("gregdonald" 0 1 (face (completions-first-difference))) #("app" 0 1 (face (completions-first-difference))) #("models" 0 1 (face (completions-first-difference))) #("rails" 0 1 (face (completions-first-difference))) #("*rspec-compilation*" 0 1 (face (completions-first-difference))) "*scratch*" "*Messages*" "*scratch*" "magit: emacs-config" "*scratch*" "page.rb" "page_spec.rb" "*rspec-compilation*" "*scratch*" "*Completions*" "*Compile-Log*" "*Messages*" "*scratch*" "*Packages*" "*rspec-compilation*"))
(setq file-name-history '("~/workspace/emacs-config/.emacs" "~/workspace/ruby/console-blackjack-ruby/spec/lib/blackjack_spec.rb" "~/workspace/emacs-config/.emacs" "~/workspace/ruby/console-blackjack-ruby/spec/lib/blackjack_spec.rb" "~/workspace/ruby/console-blackjack-ruby/spec/blackjack_spec.rb" "~/workspace/ruby/console-blackjack-ruby/lib/blackjack.rb" "~/workspace/emacs-config/.emacs" "~/workspace/emacs-config/.gitignore" "~/workspace/emacs-config/.emacs" "~/workspace/ruby/console-blackjack-ruby/lib/blackjack.rb" "~/workspace/emacs-config/.emacs" "~/workspace/emacs-config/.gitignore" "~/workspace/ruby/console-blackjack-ruby/lib/blackjack.rb" "~/workspace/emacs-config/.emacs" "~/workspace/ruby/console-blackjack-ruby/lib/blackjack.rb" "~/workspace/emacs-config/.emacs" "~/workspace/ruby/console-blackjack-ruby/lib/blackjack.rb" "~/workspace/emacs-config/.emacs" "~/workspace/ruby/console-blackjack-ruby/lib/blackjack.rb" "~/workspace/emacs-config/.gitignore" "~/workspace/emacs-config/.emacs" "~/workspace/emacs-config/.gitignore" "~/workspace/ruby/console-blackjack-ruby/lib/blackjack.rb" "~/workspace/emacs-config/.emacs" "~/workspace/ruby/console-blackjack-ruby/lib/blackjack.rb" "~/workspace/emacs-config/.emacs" "~/workspace/ruby/console-blackjack-ruby/lib/blackjack.rb" "~/workspace/emacs-config/.emacs" "~/workspace/ruby/console-blackjack-ruby/spec/lib/blackjack_spec.rb" "~/workspace/ruby/console-blackjack-ruby/spec/spec_helper.rb" "~/workspace/ruby/console-blackjack-ruby/Gemfile" "~/workspace/ruby/console-blackjack-ruby/lib/blackjack.rb" "~/workspace/emacs-config/.emacs" "~/workspace/ruby/console-blackjack-ruby/lib/blackjack.rb" "~/workspace/emacs-config/.emacs" "~/workspace/ruby/console-blackjack-ruby/lib/blackjack/card.rb" "~/workspace/rails/gregdonald/app/models/page.rb" "~/workspace/emacs-config/.emacs" "~/workspace/rails/gregdonald/app/models/page.rb" "~/workspace/emacs-config/.emacs" "~/workspace/rails/gregdonald/app/models/page.rb" "~/workspace/emacs-config/.emacs" "~/.zshrc" "~/workspace/emacs-config/.emacs" "~/workspace/rails/gregdonald" "~/workspace/rails/gregdonald/app/models/page.rb" "~/workspace/emacs-config/.emacs" "~/workspace/rails/gregdonald/app/models/page.rb" "~/workspace/emacs-config/.emacs" "~/workspace/rails/gregdonald/spec/models/page_search_spec.rb" "~/workspace/rails/gregdonald/app/models/page.rb" #("~/workspace/emacs-config/.emacs" 25 31 (prescient-regexps ("[.․︙︰﹒．]\\(?:e[̀-̄̆-̧̨̣̭̰̉̌̏̑]\\|[eè-ëēĕėęěȅȇȩᵉḕḗḙḛḝẹẻẽếềểễệₑℯⅇⓔｅ𝐞𝑒𝒆𝓮𝔢𝕖𝖊𝖾𝗲𝘦𝙚𝚎]\\)\\|.e\\|\\b\\.\\w*\\W*\\be\\w*") prescient-ignore-case t)) #("~/workspace/rails/gregdonald/app/models/page.rb" 12 18 (prescient-regexps ("\\(?:r[̧̣̱́̇̌̏̑]\\|[rŕŗřȑȓʳᵣṙṛṝṟⓡｒ𝐫𝑟𝒓𝓇𝓻𝔯𝕣𝖗𝗋𝗿𝘳𝙧𝚛]\\)\\(?:a[̀-̄̆-̨̣̥̊̌̏̑]\\|[aªà-åāăąǎǟǡǻȁȃȧᵃḁạảấầẩẫậắằẳẵặₐⓐａ𝐚𝑎𝒂𝒶𝓪𝔞𝕒𝖆𝖺𝗮𝘢𝙖𝚊]\\)\\(?:i[̀-̨̣̰̄̆̈̉̌̏̑]\\|[iì-ïĩīĭįǐȉȋᵢḭḯỉịⁱℹⅈⅰⓘｉ𝐢𝑖𝒊𝒾𝓲𝔦𝕚𝖎𝗂𝗶𝘪𝙞𝚒]\\)\\|rai\\|\\br\\w*\\W*\\ba\\w*\\W*\\bi\\w*") prescient-ignore-case t) 18 29 (prescient-regexps nil prescient-ignore-case t) 29 33 (prescient-regexps ("\\(?:a[̀-̄̆-̨̣̥̊̌̏̑]\\|[aªà-åāăąǎǟǡǻȁȃȧᵃḁạảấầẩẫậắằẳẵặₐⓐａ𝐚𝑎𝒂𝒶𝓪𝔞𝕒𝖆𝖺𝗮𝘢𝙖𝚊]\\)\\(?:p[́̇]\\|[pᵖṕṗₚⓟｐ𝐩𝑝𝒑𝓅𝓹𝔭𝕡𝖕𝗉𝗽𝘱𝙥𝚙]\\)\\|ap\\|\\ba\\w*\\W*\\bp\\w*") prescient-ignore-case t) 33 40 (prescient-regexps ("\\(?:m[̣́̇]\\|[mᵐḿṁṃₘⅿⓜｍ𝐦𝑚𝒎𝓂𝓶𝔪𝕞𝖒𝗆𝗺𝘮𝙢𝚖]\\)\\(?:o[̀-̄̆-̨̛̣̉̋̌̏̑]\\|[oºò-öōŏőơǒǫǭȍȏȫȭȯȱᵒṍṏṑṓọỏốồổỗộớờởỡợₒℴⓞｏ𝐨𝑜𝒐𝓸𝔬𝕠𝖔𝗈𝗼𝘰𝙤𝚘]\\)\\|mo\\|\\bm\\w*\\W*\\bo\\w*") prescient-ignore-case t) 40 47 (prescient-regexps ("\\(?:p[́̇]\\|[pᵖṕṗₚⓟｐ𝐩𝑝𝒑𝓅𝓹𝔭𝕡𝖕𝗉𝗽𝘱𝙥𝚙]\\)\\(?:a[̀-̄̆-̨̣̥̊̌̏̑]\\|[aªà-åāăąǎǟǡǻȁȃȧᵃḁạảấầẩẫậắằẳẵặₐⓐａ𝐚𝑎𝒂𝒶𝓪𝔞𝕒𝖆𝖺𝗮𝘢𝙖𝚊]\\)\\(?:g[̧́̂̄̆̇̌]\\|[gĝğġģǧǵᵍḡℊⓖｇ𝐠𝑔𝒈𝓰𝔤𝕘𝖌𝗀𝗴𝘨𝙜𝚐]\\)\\(?:e[̀-̄̆-̧̨̣̭̰̉̌̏̑]\\|[eè-ëēĕėęěȅȇȩᵉḕḗḙḛḝẹẻẽếềểễệₑℯⅇⓔｅ𝐞𝑒𝒆𝓮𝔢𝕖𝖊𝖾𝗲𝘦𝙚𝚎]\\)[.․︙︰﹒．]\\(?:r[̧̣̱́̇̌̏̑]\\|[rŕŗřȑȓʳᵣṙṛṝṟⓡｒ𝐫𝑟𝒓𝓇𝓻𝔯𝕣𝖗𝗋𝗿𝘳𝙧𝚛]\\)\\(?:b[̣̱̇]\\|[bᵇḃḅḇⓑｂ𝐛𝑏𝒃𝒷𝓫𝔟𝕓𝖇𝖻𝗯𝘣𝙗𝚋]\\)\\|page.rb\\|\\bp\\w*\\W*\\ba\\w*\\W*\\bg\\w*\\W*\\be\\w*\\W*\\b\\.\\w*\\W*\\br\\w*\\W*\\bb\\w*") prescient-ignore-case t)) #("~/workspace/emacs-config/.emacs" 25 31 (prescient-ignore-case t prescient-regexps nil)) "~/workspace/emacs-config/.gitignore" #("~/workspace/tdd-book/manuscript/01-intro.tex" 32 44 (prescient-ignore-case t prescient-regexps ("[0⁰₀⓪０𝟎𝟘𝟢𝟬𝟶🯰][1¹₁①１𝟏𝟙𝟣𝟭𝟷🯱]\\|01\\|\\b0\\w*\\W*\\b1\\w*"))) #("~/workspace/tdd-book/manuscript/01-intro.aux" 12 21 (prescient-ignore-case t prescient-regexps ("\\(?:t[̧̣̦̭̱̇̈̌]\\|[tţťțᵗṫṭṯṱẗₜⓣｔ𝐭𝑡𝒕𝓉𝓽𝔱𝕥𝖙𝗍𝘁𝘵𝙩𝚝]\\)\\(?:d[̧̣̭̱̇̌]\\|[dďᵈḋḍḏḑḓⅆⅾⓓｄ𝐝𝑑𝒅𝒹𝓭𝔡𝕕𝖉𝖽𝗱𝘥𝙙𝚍]\\)\\(?:d[̧̣̭̱̇̌]\\|[dďᵈḋḍḏḑḓⅆⅾⓓｄ𝐝𝑑𝒅𝒹𝓭𝔡𝕕𝖉𝖽𝗱𝘥𝙙𝚍]\\)\\|tdd\\|\\bt\\w*\\W*\\bd\\w*\\W*\\bd\\w*")) 21 32 (prescient-ignore-case t prescient-regexps nil) 32 44 (prescient-ignore-case t prescient-regexps ("[0⁰₀⓪０𝟎𝟘𝟢𝟬𝟶🯰][1¹₁①１𝟏𝟙𝟣𝟭𝟷🯱][﹣－-]\\(?:\\(?:i[̀-̨̣̰̄̆̈̉̌̏̑]\\|[iì-ïĩīĭįǐȉȋᵢḭḯỉịⁱℹⅈⅰⓘｉ𝐢𝑖𝒊𝒾𝓲𝔦𝕚𝖎𝗂𝗶𝘪𝙞𝚒]\\)\\(?:n[̧̣̭̱̀́̃̇̌]\\|[nñńņňǹṅṇṉṋⁿₙⓝｎ𝐧𝑛𝒏𝓃𝓷𝔫𝕟𝖓𝗇𝗻𝘯𝙣𝚗]\\)\\|㏌\\)\\(?:t[̧̣̦̭̱̇̈̌]\\|[tţťțᵗṫṭṯṱẗₜⓣｔ𝐭𝑡𝒕𝓉𝓽𝔱𝕥𝖙𝗍𝘁𝘵𝙩𝚝]\\)\\(?:r[̧̣̱́̇̌̏̑]\\|[rŕŗřȑȓʳᵣṙṛṝṟⓡｒ𝐫𝑟𝒓𝓇𝓻𝔯𝕣𝖗𝗋𝗿𝘳𝙧𝚛]\\)\\(?:o[̀-̄̆-̨̛̣̉̋̌̏̑]\\|[oºò-öōŏőơǒǫǭȍȏȫȭȯȱᵒṍṏṑṓọỏốồổỗộớờởỡợₒℴⓞｏ𝐨𝑜𝒐𝓸𝔬𝕠𝖔𝗈𝗼𝘰𝙤𝚘]\\)[.․︙︰﹒．]\\(?:a[̀-̄̆-̨̣̥̊̌̏̑]\\|[aªà-åāăąǎǟǡǻȁȃȧᵃḁạảấầẩẫậắằẳẵặₐⓐａ𝐚𝑎𝒂𝒶𝓪𝔞𝕒𝖆𝖺𝗮𝘢𝙖𝚊]\\)\\(?:u[̀-̄̆̈-̨̛̣̤̭̰̌̏̑]\\|[uù-üũūŭůűųưǔǖǘǚǜȕȗᵘᵤṳṵṷṹṻụủứừửữựⓤｕ𝐮𝑢𝒖𝓊𝓾𝔲𝕦𝖚𝗎𝘂𝘶𝙪𝚞]\\)\\(?:x[̇̈]\\|[xˣẋẍₓⅹⓧｘ𝐱𝑥𝒙𝓍𝔁𝔵𝕩𝖝𝗑𝘅𝘹𝙭𝚡]\\)\\|01-intro.aux\\|\\b0\\w*\\W*\\b1\\w*\\W*\\b-\\w*\\W*\\bi\\w*\\W*\\bn\\w*\\W*\\bt\\w*\\W*\\br\\w*\\W*\\bo\\w*\\W*\\b\\.\\w*\\W*\\ba\\w*\\W*\\bu\\w*\\W*\\bx\\w*"))) #("~/.emacs" 2 5 (face (completions-common-part)) 5 6 (face (completions-first-difference))) #("~/workspace/rails/" 12 14 (face (completions-common-part)) 14 15 (face (completions-first-difference))) "~/workspace/emacs-config/.emacs" "~/workspace/rails/gregdonald/app/models/page.rb" "~/workspace/emacs-config/.emacs" "~/workspace/rails/gregdonald/app/models/page.rb" "~/workspace/rails/gregdonald/Gemfile" "~/workspace/emacs-config/.emacs" "~/workspace/rails/gregdonald/app/models/page.rb" "~/workspace/emacs-config/.emacs" "~/workspace/rails/gregdonald/app/models/page.rb" "~/.emacs" "~/workspace/rails/gregdonald/app/models/page.rb" "~/.emacs" "~/workspace/rails/gregdonald/app/models/page.rb" "~/.emacs"))
(setq kill-ring '(#(";;
;(global-git-gutter-mode +1)


" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 3 (fontified t) 3 4 (fontified t face font-lock-comment-delimiter-face) 4 31 (fontified t face font-lock-comment-face) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t)) #(";;
;(add-to-list 'custom-theme-load-path
;             (file-name-as-directory \"~/.emacs.d/themes\"))
;(load-theme 'billw t t)
;(enable-theme 'billw)

;;
;(require 'powerline)
;(powerline-center-theme)
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 3 (fontified t) 3 4 (fontified t face font-lock-comment-delimiter-face) 4 40 (fontified t face font-lock-comment-face) 40 41 (fontified t) 41 55 (fontified t face font-lock-comment-delimiter-face) 55 100 (fontified t face font-lock-comment-face) 100 101 (fontified t) 101 102 (fontified t face font-lock-comment-delimiter-face) 102 125 (fontified t face font-lock-comment-face) 125 126 (fontified t) 126 127 (fontified t face font-lock-comment-delimiter-face) 127 148 (fontified t face font-lock-comment-face) 148 149 (fontified t) 149 150 (fontified t) 150 152 (face font-lock-comment-delimiter-face fontified t) 152 153 (fontified t) 153 154 (face font-lock-comment-delimiter-face fontified t) 154 174 (face font-lock-comment-face fontified t) 174 175 (fontified t) 175 176 (face font-lock-comment-delimiter-face fontified t) 176 200 (face font-lock-comment-face fontified t) 200 201 (fontified t)) #("dd-diff-hl-mode)
(diff-hl-margin-mode)
(diff-hl-flydiff-mode)

" 0 2 (fontified t) 2 16 (fontified t) 16 17 (fontified t) 17 38 (fontified t) 38 39 (fontified t) 39 40 (fontified t) 40 59 (fontified t) 59 60 (fontified t rear-nonsticky t) 60 61 (fontified t) 61 62 (fontified t) 62 63 (fontified t)) #(";;
;(global" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 3 (fontified t face font-lock-comment-face) 3 4 (fontified t face font-lock-comment-delimiter-face) 4 11 (fontified t face font-lock-comment-face)) "diff-hl-flydiff-mode" "(global-diff-hl-mode)" "diff-hl-margin-mode" #("erm" 0 3 (fontified t)) #("erm mode" 0 3 (fontified t) 3 8 (fontified t)) "(global-git-gutter-mode +1)" #(";;

" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 3 (fontified t) 3 4 (fontified t)) #(";(face-attribute 'default :background nil t)
;(face-attribute 'hl-line :background nil t)

(set-cursor-color \"Red\")
" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 26 (fontified t face font-lock-comment-face) 26 37 (fontified t face font-lock-comment-face) 37 45 (fontified t face font-lock-comment-face) 45 46 (fontified t face font-lock-comment-delimiter-face) 46 90 (fontified t face font-lock-comment-face) 90 109 (fontified t) 109 114 (fontified t face font-lock-string-face) 114 115 (fontified t) 115 116 (fontified t)) "(face-attribute 'hl-line :background nil t)" "(face-attribute 'default :background nil t)" #("(set-cursor-color \"red\")" 0 18 (fontified t) 18 23 (face font-lock-string-face fontified t) 23 24 (fontified t)) #("(global-set-key (kbd \"C-c <up>\") 'move-text-up)" 0 1 (fontified t) 1 17 (fontified t) 17 21 (fontified t) 21 31 (face font-lock-string-face fontified t) 31 34 (fontified t) 34 47 (fontified t)) "(move-text-default-bindings)" "(move-text-default-bindings)" #(";(global-set-key (kbd \"C-c <\") 'mc/skip-to-previous-like-this)
;(global-set-key (kbd \"C-c >\") 'mc/skip-to-next-like-this)
" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 22 (face font-lock-comment-face fontified t) 22 29 (face font-lock-comment-face fontified t) 29 62 (face font-lock-comment-face fontified t) 62 63 (fontified t) 63 64 (fontified t face font-lock-comment-delimiter-face) 64 85 (fontified t face font-lock-comment-face) 85 92 (fontified t face font-lock-comment-face) 92 121 (fontified t face font-lock-comment-face) 121 122 (fontified t)) ".emacs.d/.mc-lists.el" #(";;
(setq keycast-mode-line-insert-after 'mode-line-buffer-identification)

" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 3 (fontified t face font-lock-comment-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-keyword-face) 8 73 (fontified t) 73 74 (fontified t) 74 75 (fontified t)) "(setq keycast-mode-line-insert-after 'mode-line-buffer-identification)" #("(global-set-key (kbd \"C-'\") ctl-quote-map)
;(define-key ctl-quote-map (kbd \"g\") 'mc/mark-all-dwim)

" 0 21 (fontified t) 21 26 (fontified t face font-lock-string-face) 26 28 (fontified t) 28 42 (fontified t) 42 43 (fontified t) 43 44 (face font-lock-comment-delimiter-face fontified t) 44 98 (face font-lock-comment-face fontified t) 98 99 (fontified t) 99 100 (fontified t)) "(global-set-key (kbd \"C-'\") ctl-quote-map)
(define-key ctl-quote-map (kbd \"C-p\") 'stumpwm-move-window-up)" "(global-set-key (kbd \"C-'\") ctl-quote-map)
(define-key ctl-quote-map (kbd \"C-p\") 'stumpwm-move-window-up)" #("OA" 0 2 (fontified t)) #("(global-set-key (kbd \"C-M-\") 'mc/)" 0 1 (fontified t) 1 21 (fontified t) 21 27 (fontified t face font-lock-string-face) 27 30 (fontified t) 30 33 (fontified t) 33 34 (rear-nonsticky t fontified t)) #("(global-set-key (kbd \"C-M-\") 'mc/)" 0 1 (fontified t) 1 21 (fontified t) 21 27 (fontified t face font-lock-string-face) 27 30 (fontified t) 30 33 (fontified t) 33 34 (rear-nonsticky t fontified t)) #("(global-set-key (kbd \"C-M-\") 'mc/)" 0 1 (fontified t) 1 21 (fontified t) 21 27 (fontified t face font-lock-string-face) 27 30 (fontified t) 30 33 (fontified t) 33 34 (rear-nonsticky t fontified t)) #("(global-set-key (kbd \"C-M-\") 'mc/)" 0 1 (fontified t) 1 21 (fontified t) 21 27 (fontified t face font-lock-string-face) 27 30 (fontified t) 30 33 (fontified t) 33 34 (rear-nonsticky t fontified t)) #("(global-set-key (kbd \"C-M-\") 'mc/)" 0 1 (fontified t) 1 21 (fontified t) 21 27 (fontified t face font-lock-string-face) 27 30 (fontified t) 30 33 (fontified t) 33 34 (rear-nonsticky t fontified t)) #("(global-set-key (kbd \"C-M-\") 'mc/)" 0 1 (fontified t) 1 21 (fontified t) 21 27 (fontified t face font-lock-string-face) 27 30 (fontified t) 30 33 (fontified t) 33 34 (fontified t rear-nonsticky t)) #("(global-set-key (kbd \"C-M-j\") 'mc/mark-all-dwim)" 0 1 (fontified t) 1 21 (fontified t) 21 28 (fontified t face font-lock-string-face) 28 31 (fontified t) 31 48 (fontified t)) ".emacs.d/elpa/archives/melpa/archive-contents" #(";;
(require 'cl-lib)
(require 'multiple-cursors)
(global-set-key (kbd \"C-S-c C-S-c\") 'mc/edit-lines)
(global-set-key (kbd \"C->\") 'mc/mark-next-like-this)
(global-set-key (kbd \"C-<\") 'mc/mark-previous-like-this)
(global-set-key (kbd \"C-c C-<\") 'mc/mark-all-like-this)

" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 11 (fontified t face font-lock-keyword-face) 11 13 (fontified t) 13 19 (fontified t face font-lock-constant-face) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 29 (fontified t face font-lock-keyword-face) 29 31 (fontified t) 31 47 (fontified t face font-lock-constant-face) 47 48 (fontified t) 48 49 (fontified t) 49 70 (fontified t) 70 83 (fontified t face font-lock-string-face) 83 100 (fontified t) 100 101 (fontified t) 101 122 (fontified t) 122 127 (fontified t face font-lock-string-face) 127 153 (fontified t) 153 154 (fontified t) 154 175 (fontified t) 175 180 (fontified t face font-lock-string-face) 180 210 (fontified t) 210 211 (fontified t) 211 232 (fontified t) 232 241 (fontified t face font-lock-string-face) 241 266 (fontified t) 266 267 (fontified t) 267 268 (fontified t)) "(require 'cl-lib)" "(require 'cl-lib)" "lsp-warn-no-matched-clients" "lsp-warn-no-matched-clients" "(global-set-key (kbd \"C->\") 'mc/mark-next-like-this)
(global-set-key (kbd \"C-<\") 'mc/mark-previous-like-this)
(global-set-key (kbd \"C-c C-<\") 'mc/mark-all-like-this)" "(global-set-key (kbd \"C->\") 'mc/mark-next-like-this)
(global-set-key (kbd \"C-<\") 'mc/mark-previous-like-this)
(global-set-key (kbd \"C-c C-<\") 'mc/mark-all-like-this)" "(global-set-key (kbd \"C-S-c C-S-c\") 'mc/edit-lines)" "(global-set-key (kbd \"C-S-c C-S-c\") 'mc/edit-lines)" "(require 'multiple-cursors)" "(require 'multiple-cursors)" ".emacs.d/transient/history.el" "(require 'all-the-icons)" "all-the-icons" "(add-hook 'after-init-hook #'doom-modeline-mode)" "all-the-icons-install-fonts" "(require 'doom-modeline)
(doom-modeline-mode 1)" "lsp-warn-no-matched-clients" "lsp-warn-no-matched-clients" #(";(add-hook 'ruby-mode-hook #'lsp)
" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 33 (fontified t face font-lock-comment-face) 33 34 (fontified t)) #(";;
;(selectrum-mode +1)
;(selectrum-prescient-mode +1)
;(prescient-persist-mode +1)

" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 3 (fontified t) 3 4 (fontified t face font-lock-comment-delimiter-face) 4 23 (fontified t face font-lock-comment-face) 23 24 (fontified t) 24 25 (fontified t face font-lock-comment-delimiter-face) 25 54 (fontified t face font-lock-comment-face) 54 55 (fontified t) 55 56 (fontified t face font-lock-comment-delimiter-face) 56 83 (fontified t face font-lock-comment-face) 83 84 (fontified t) 84 85 (fontified t)) #(";;
;;(require 'spaceline-config)
;;(spaceline-spacemacs-theme)

" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 3 (fontified t) 3 5 (fontified t face font-lock-comment-delimiter-face) 5 32 (fontified t face font-lock-comment-face) 32 33 (fontified t) 33 35 (fontified t face font-lock-comment-delimiter-face) 35 62 (fontified t face font-lock-comment-face) 62 63 (fontified t) 63 64 (fontified t)) #(";; (powerline-default-theme)
" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 28 (fontified t face font-lock-comment-face) 28 29 (fontified t)) "(require 'spaceline-config)
(spaceline-spacemacs-theme)" #("# require 'pry'

" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 9 (face font-lock-comment-face fontified t) 9 10 (face font-lock-comment-face fontified t) 10 15 (face font-lock-comment-face fontified t) 15 16 (fontified t) 16 17 (fontified t)) #("# gem 'pry'
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 6 (fontified t face font-lock-comment-face) 6 11 (fontified t face font-lock-comment-face) 11 12 (fontified t))))
(setq search-ring '(#("C-c" 0 3 (isearch-regexp-function nil isearch-case-fold-search nil)) #("C-M-" 0 4 (isearch-regexp-function nil isearch-case-fold-search nil)) #("C-M-.	" 0 6 (isearch-regexp-function nil isearch-case-fold-search nil)) #("multiple" 0 8 (isearch-regexp-function nil isearch-case-fold-search t)) #("compan" 0 6 (isearch-regexp-function nil isearch-case-fold-search t)) #("make_slug" 0 9 (isearch-case-fold-search t isearch-regexp-function nil))))
(setq regexp-search-ring 'nil)
