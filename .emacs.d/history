;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(read-expression-history minibuffer-history extended-command-history buffer-name-history))
(setq minibuffer-history '("atom-one-dark-theme"))
(setq extended-command-history '("package-install"))
(setq buffer-name-history '(".emacs" "*Messages*" "*About GNU Emacs*"))
(setq kill-ring '("(load-theme 'atom-one-dark t)" "atom-one-dark-theme" "(defun duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
)
(global-set-key (kbd \"C-d\") 'duplicate-line)" "(defun yarn-run-test()
  (interactive)
  (setq file (buffer-file-name))
  
  (setq current-line (thing-at-point 'line))
  (string-match \"\\\\(it\\\\|describe\\\\)(\\\\('\\\\|\\\"\\\\)\\\\(.*\\\\)\\\\('\\\\|\\\"\\\\)\" current-line)
  (setq quot (match-string 2 current-line))
  (setq desc (match-string 3 current-line))
  
  (if (not (null desc))
      (progn
	(setq yt \"*yarn test*\")
	(get-buffer-create yt)
	(switch-to-buffer yt)
	(let ((default-directory (substring (shell-command-to-string \"git rev-parse --show-toplevel\") 0 -1)))
	  ;;(setq cmd (concat \"yarn testOne --no-color \" file \" --grep \" quot desc quot))
	  (setq cmd (concat \"yarn test --no-color \" file \" -t \" quot desc quot))
	  (insert (concat \"\\n\" cmd \"\\n\" (make-string (length cmd) ?-) \"\\n\\n\"))
	  (start-process-shell-command \"yarn\" yt cmd)))))" #(";;
(add-to-list 'auto-mode-alist '(\"Gemfile\" . ruby-mode))
(add-to-list 'auto-mode-alist '(\"\\\\.scss.erb\\\\'\" . scss-mode))
" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 3 (face font-lock-comment-face fontified t) 3 35 (fontified t) 35 44 (face font-lock-string-face fontified t) 44 91 (fontified t) 91 107 (face font-lock-string-face fontified t) 107 122 (fontified t))))
(setq search-ring '(#("k" 0 1 (isearch-case-fold-search t isearch-regexp-function nil))))
(setq regexp-search-ring 'nil)
